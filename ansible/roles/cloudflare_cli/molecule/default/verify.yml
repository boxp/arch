---
- name: Verify
  hosts: all
  become: true
  tasks:
    - name: Check cloudflared binary exists
      ansible.builtin.stat:
        path: /usr/local/bin/cloudflared
      register: cloudflared_binary

    - name: Verify cloudflared binary is executable
      ansible.builtin.assert:
        that:
          - cloudflared_binary.stat.exists
          - cloudflared_binary.stat.executable
        fail_msg: "cloudflared binary should exist and be executable"
        success_msg: "cloudflared binary is properly installed"

    - name: Check cloudflared version
      ansible.builtin.command: /usr/local/bin/cloudflared version
      register: cloudflared_version
      changed_when: false

    - name: Verify cloudflared version output
      ansible.builtin.assert:
        that:
          - cloudflared_version.rc == 0
          - "'cloudflared version' in cloudflared_version.stdout"
        fail_msg: "cloudflared version command should work"
        success_msg: "cloudflared version command works correctly"

    - name: Check cloudflared help
      ansible.builtin.command: /usr/local/bin/cloudflared help
      register: cloudflared_help
      changed_when: false

    - name: Verify cloudflared help output contains tunnel commands
      ansible.builtin.assert:
        that:
          - cloudflared_help.rc == 0
          - "'tunnel' in cloudflared_help.stdout"
        fail_msg: "cloudflared help should contain tunnel commands"
        success_msg: "cloudflared help shows tunnel functionality"

    - name: Check if cloudflared service template exists (if configured)
      ansible.builtin.stat:
        path: /etc/systemd/system/cloudflared.service
      register: cloudflared_service
      when: cloudflare_cli_enable_service | default(false)

    - name: Verify cloudflared service file (if enabled)
      ansible.builtin.assert:
        that:
          - cloudflared_service.stat.exists
        fail_msg: "cloudflared service file should exist when service is enabled"
        success_msg: "cloudflared service file exists"
      when: cloudflare_cli_enable_service | default(false)
