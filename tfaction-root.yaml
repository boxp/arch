---
plan_workflow_name: pull_request_target

draft_pr: false # default is false. If `draft_pr` is true, tfaction creates pull requests as draft
base_working_directory: "" # default is empty, which means the current directory
working_directory_file: tfaction.yaml # default is "tfaction.yaml"

# conftest_policy_directory: tfaction >= v1.1.0
# conftest_policy_directory is the file path to the conftest policy directory.
# The default value is "policy".
# If conftest_policy_directory isn't set and the directory policy doesn't exist, contest is skipped.
# If conftest_policy_directory is set but the directory doesn't exist, the action fails.
conftest_policy_directory: policy/terraform

renovate_login: 'renovate[bot]' # default is "renovate[bot]"
label_prefixes:
  target: "target:" # default is "target:"
  tfmigrate: "tfmigrate:" # default is "tfmigrate:"
  skip: "skip:" # default is "skip:"

aqua:
  update_checksum:
    # Update aqua-checksums.json in `setup` action
    enabled: true # default is false
    skip_push: false # default is false
    prune: true # default is false

# env:
  # Environment variables
  # <environment variable name>: <value>
  # FOO: foo

# https://github.com/suzuki-shunsuke/tfaction/pull/1106
# tfsec:
#   enabled: true
# tflint:
#   enabled: true
# trivy:
#   enabled: false

# We don't recommend disabling this feature.
# update_related_pull_requests:
#   enabled: false

# tfaction >= v0.5.25
# https://github.com/suzuki-shunsuke/tfaction/pull/910
# scaffold_working_directory:
#   skip_adding_aqua_packages: true

# tfaction >= v0.6.0
drift_detection:
  enabled: false
  issue_repo_owner: boxp
  issue_repo_name: arch
  num_of_issues: 1
  minimum_detection_interval: 1

terraform_command: terraform

target_groups:
- working_directory: terraform/aws/
  target: terraform/aws/
  aws_region: ap-northeast-1
  s3_bucket_name_tfmigrate_history: 'tfaction-history'
  template_dir: templates/aws # This is used by `scaffold-working-dir` action
  terraform_command: terraform
  drift_detection:
    enabled: false
  terraform_plan_config:
    aws_assume_role_arn: arn:aws:iam::839695154978:role/GitHubActions_Terraform_AWS_terraform_plan
  tfmigrate_plan_config:
    aws_assume_role_arn: arn:aws:iam::839695154978:role/GitHubActions_Terraform_AWS_tfmigrate_plan
  terraform_apply_config:
    aws_assume_role_arn: arn:aws:iam::839695154978:role/GitHubActions_Terraform_AWS_terraform_apply
  tfmigrate_apply_config:
    aws_assume_role_arn: arn:aws:iam::839695154978:role/GitHubActions_Terraform_AWS_tfmigrate_apply

- working_directory: terraform/cloudflare/
  target: terraform/cloudflare/
  aws_region: ap-northeast-1
  s3_bucket_name_tfmigrate_history: 'tfaction-history'
  template_dir: templates/cloudflare # This is used by `scaffold-working-dir` action
  terraform_command: terraform
  drift_detection:
    enabled: false
  terraform_plan_config:
    aws_assume_role_arn: arn:aws:iam::839695154978:role/GitHubActions_Terraform_AWS_terraform_plan
  tfmigrate_plan_config:
    aws_assume_role_arn: arn:aws:iam::839695154978:role/GitHubActions_Terraform_AWS_tfmigrate_plan
  terraform_apply_config:
    aws_assume_role_arn: arn:aws:iam::839695154978:role/GitHubActions_Terraform_AWS_terraform_apply
  tfmigrate_apply_config:
    aws_assume_role_arn: arn:aws:iam::839695154978:role/GitHubActions_Terraform_AWS_tfmigrate_apply

# - working_directory: github/services/
#   target: github/
#   aws_region: ap-northeast-1
#   s3_bucket_name_tfmigrate_history: '<S3 Bucket Name for tfmigrate history files>'
#   template_dir: templates/github
#   aws_secrets_manager:
#   env:
#     # Environment variables
#     FOO: foo
#   # export AWS Secrets Manager's secret as environment variable
#   - secret_id: bar
#     envs:
#     - env_name: BAR
#   terraform_plan_config:
#     aws_assume_role_arn: arn:aws:iam::000000000000:role/GitHubActions_Terraform_github_terraform_plan
#     env:
#       # Environment variables
#       FOO: foo
#   tfmigrate_plan_config:
#     aws_assume_role_arn: arn:aws:iam::000000000000:role/GitHubActions_Terraform_github_tfmigrate_plan
#   terraform_apply_config:
#     aws_assume_role_arn: arn:aws:iam::000000000000:role/GitHubActions_Terraform_github_terraform_apply
#     aws_secrets_manager:
#     # export AWS Secrets Manager's secret as environment variable
#     - secret_id: atlas_api_key
#       envs:
#       - env_name: ATLAS_API_PUBLIC_KEY
#         secret_key: public_key
#       - env_name: ATLAS_API_PRIVATE_KEY
#         secret_key: private_key
#   tfmigrate_apply_config:
#     aws_assume_role_arn: arn:aws:iam::000000000000:role/GitHubActions_Terraform_github_tfmigrate_apply

# - working_directory: gcp/
#   target: gcp/
#   aws_region: ap-northeast-1
#   template_dir: templates/github
#   runs_on: ubuntu-latest # default is "ubuntu-latest". This is useful to use GitHub Actions Self Hosted Runner for the specific provider
#   environment: # default is null
#     # https://docs.github.com/en/actions/deployment/targeting-different-environments/using-environments-for-deployment
#     name: production
#     url: https://github.com
#   secrets: # GitHub Secrets
#   - env_name: FOO # Environment variable name
#     secret_name: FOO_STAGING # Secret name

#   gcs_bucket_name_tfmigrate_history: '<Google Cloud Storage Bucket Name for tfmigrate history files>'
#   terraform_plan_config:
#     aws_assume_role_arn: arn:aws:iam::000000000000:role/GitHubActions_Terraform_gcp_terraform_plan
#     gcp_service_account: terraform@my-project.iam.gserviceaccount.com
#     gcp_workload_identity_provider: 'projects/123456789/locations/global/workloadIdentityPools/my-pool/providers/my-provider'
#   tfmigrate_plan_config:
#     aws_assume_role_arn: arn:aws:iam::000000000000:role/GitHubActions_Terraform_gcp_tfmigrate_plan
#     gcp_service_account: terraform@my-project.iam.gserviceaccount.com
#     gcp_workload_identity_provider: 'projects/123456789/locations/global/workloadIdentityPools/my-pool/providers/my-provider'
#   terraform_apply_config:
#     aws_assume_role_arn: arn:aws:iam::000000000000:role/GitHubActions_Terraform_gcp_terraform_apply
#     gcp_service_account: terraform@my-project.iam.gserviceaccount.com
#     gcp_workload_identity_provider: 'projects/123456789/locations/global/workloadIdentityPools/my-pool/providers/my-provider'
#   tfmigrate_apply_config:
#     aws_assume_role_arn: arn:aws:iam::000000000000:role/GitHubActions_Terraform_gcp_tfmigrate_apply
#     gcp_service_account: terraform@my-project.iam.gserviceaccount.com
#     gcp_workload_identity_provider: 'projects/123456789/locations/global/workloadIdentityPools/my-pool/providers/my-provider'

replace:
  patterns:
    - regexp: terraform/(.*)/
      replace: "$1/"