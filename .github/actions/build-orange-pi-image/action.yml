name: 'Build Orange Pi Image'
description: 'Build customized Orange Pi Zero 3 image for specific node'
inputs:
  node_name:
    description: 'Name of the node (e.g., shanghai-1)'
    required: true
  aws_role_arn:
    description: 'AWS IAM role ARN for S3 access'
    required: true
  s3_bucket:
    description: 'S3 bucket name for storing images'
    required: true

runs:
  using: 'composite'
  steps:
    - name: Set up QEMU for ARM64 emulation
      uses: docker/setup-qemu-action@v3
      with:
        platforms: linux/arm64

    - name: Install dependencies
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y wget xz-utils kpartx ansible aria2

    - name: Cache Armbian image
      uses: actions/cache@v4
      id: cache-armbian
      with:
        path: orangepi-zero3-noble-server.img.xz
        key: armbian-orangepi-zero3-noble-${{ hashFiles('**/node-*.yml') || '20250721' }}
        
    - name: Download Orange Pi Zero 3 server image
      if: steps.cache-armbian.outputs.cache-hit != 'true'
      shell: bash
      run: |
        OUTPUT_FILE="orangepi-zero3-noble-server.img.xz"
        TORRENT_URL="https://dl.armbian.com/orangepizero3/Noble_current_server.torrent"
        
        echo "Downloading Orange Pi Zero 3 Noble server image..."
        echo "Primary method: P2P torrent download"
        
        # Try torrent download first with optimized settings
        echo "Starting torrent download with aria2c..."
        if aria2c \
          --bt-tracker-timeout=60 \
          --bt-tracker-connect-timeout=30 \
          --bt-request-peer-speed-limit=1M \
          --max-connection-per-server=8 \
          --max-concurrent-downloads=8 \
          --seed-time=0 \
          --max-upload-limit=10K \
          --bt-max-peers=50 \
          --bt-stop-timeout=300 \
          --timeout=600 \
          --retry-wait=10 \
          --max-tries=3 \
          --summary-interval=30 \
          "${TORRENT_URL}"; then
          
          # Find and rename downloaded file
          DOWNLOADED_FILE=$(find . -name "*.img.xz" -type f -not -name "$OUTPUT_FILE" | head -n1)
          if [ -n "$DOWNLOADED_FILE" ] && [ -f "$DOWNLOADED_FILE" ]; then
            mv "$DOWNLOADED_FILE" "$OUTPUT_FILE"
            echo "✅ Torrent download successful: $OUTPUT_FILE"
            echo "📊 File size: $(du -h "${OUTPUT_FILE}" | cut -f1)"
            echo "🚀 P2P download completed successfully!"
          else
            echo "❌ Torrent downloaded but file not found"
            rm -f *.img.xz *.torrent
          fi
        else
          echo "❌ Torrent download failed, cleaning up..."
          rm -f *.img.xz *.torrent
        fi
        
        # Fallback to HTTP mirrors only if torrent completely failed
        if [ ! -f "${OUTPUT_FILE}" ]; then
          echo "🔄 Falling back to HTTP mirrors..."
          MIRRORS=(
            "https://dl.armbian.com/orangepizero3/Noble_current_server"
            "https://mirrors.bfsu.edu.cn/armbian-releases/orangepizero3/archive/Armbian_25.5.1_Orangepizero3_noble_current_6.12.23_minimal.img.xz"
          )
          
          for i in "${!MIRRORS[@]}"; do
            MIRROR="${MIRRORS[$i]}"
            echo "Trying mirror $((i+1))/${#MIRRORS[@]}: $MIRROR"
            if wget -T 60 -t 2 --progress=bar:force -O "${OUTPUT_FILE}" "${MIRROR}"; then
              echo "✅ HTTP download successful from mirror $((i+1))"
              break
            else
              echo "❌ Failed to download from mirror $((i+1))"
              rm -f "${OUTPUT_FILE}"
            fi
          done
        fi
        
        # Final verification
        if [ ! -f "${OUTPUT_FILE}" ]; then
          echo "💥 FATAL: Failed to download image from all sources (P2P + HTTP)"
          exit 1
        fi
        
        echo "📦 Final result: ${OUTPUT_FILE}"
        echo "📏 File size: $(du -h "${OUTPUT_FILE}" | cut -f1)"
        echo "🎯 Download completed successfully!"

    - name: Extract and customize image for node
      shell: bash
      run: |
        # Use the downloaded image
        IMAGE_FILE="orangepi-zero3-noble-server.img.xz"
        if [ ! -f "$IMAGE_FILE" ]; then
          echo "Error: Image file not found: $IMAGE_FILE"
          exit 1
        fi
        
        echo "Using image: $IMAGE_FILE"
        
        # Extract image
        xz -d "$IMAGE_FILE"
        IMG_FILE="orangepi-zero3-noble-server.img"
        
        # Create loop device
        LOOP_DEVICE=$(sudo losetup -f --show "$IMG_FILE")
        echo "Loop device: $LOOP_DEVICE"
        
        # Wait for partitions to be available
        sleep 2
        sudo partprobe "$LOOP_DEVICE"
        
        # Mount root partition
        sudo mkdir -p /mnt/orangepi
        sudo mount "${LOOP_DEVICE}p1" /mnt/orangepi
        
        # Apply common control-plane configuration first
        cd ansible
        sudo ansible-playbook \
          -i localhost, \
          -c local \
          -e ansible_host=localhost \
          -e target_mount=/mnt/orangepi \
          playbooks/control-plane.yml
        
        # Apply node-specific configuration
        sudo ansible-playbook \
          -i localhost, \
          -c local \
          -e ansible_host=localhost \
          -e target_mount=/mnt/orangepi \
          playbooks/node-${{ inputs.node_name }}.yml
        
        # Cleanup
        sudo umount /mnt/orangepi
        sudo losetup -d "$LOOP_DEVICE"
        
        # Compress customized image
        xz -9 "$IMG_FILE"
        
        # Create final image name
        FINAL_IMAGE="orangepi-zero3-${{ inputs.node_name }}.img.xz"
        mv "${IMG_FILE}.xz" "$FINAL_IMAGE"
        
        # Generate checksum
        sha256sum "$FINAL_IMAGE" > "${FINAL_IMAGE}.sha256"
        
        # Create image info
        cat > image-info.json << EOF
        {
          "node_name": "${{ inputs.node_name }}",
          "build_date": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
          "image_file": "$FINAL_IMAGE",
          "checksum_file": "${FINAL_IMAGE}.sha256",
          "armbian_version": "latest-noble",
          "github_sha": "$GITHUB_SHA"
        }
        EOF

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ inputs.aws_role_arn }}
        aws-region: ap-northeast-1

    - name: Upload to S3
      shell: bash
      run: |
        # Upload image file
        aws s3 cp "orangepi-zero3-${{ inputs.node_name }}.img.xz" \
          "s3://${{ inputs.s3_bucket }}/images/orange-pi-zero3/${{ inputs.node_name }}/"
        
        # Upload checksum
        aws s3 cp "orangepi-zero3-${{ inputs.node_name }}.img.xz.sha256" \
          "s3://${{ inputs.s3_bucket }}/images/orange-pi-zero3/${{ inputs.node_name }}/"
        
        # Upload image info
        aws s3 cp image-info.json \
          "s3://${{ inputs.s3_bucket }}/images/orange-pi-zero3/${{ inputs.node_name }}/"
        
        # Create latest symlink
        aws s3 cp "orangepi-zero3-${{ inputs.node_name }}.img.xz" \
          "s3://${{ inputs.s3_bucket }}/images/orange-pi-zero3/${{ inputs.node_name }}/latest.img.xz"
        
        # Set metadata
        aws s3api put-object-tagging \
          --bucket "${{ inputs.s3_bucket }}" \
          --key "images/orange-pi-zero3/${{ inputs.node_name }}/orangepi-zero3-${{ inputs.node_name }}.img.xz" \
          --tagging "TagSet=[{Key=NodeName,Value=${{ inputs.node_name }}},{Key=BuildDate,Value=$(date +%Y-%m-%d)},{Key=GitSHA,Value=$GITHUB_SHA}]"