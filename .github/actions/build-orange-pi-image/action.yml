name: 'Build Orange Pi Image'
description: 'Build customized Orange Pi Zero 3 image for specific node'
inputs:
  node_name:
    description: 'Name of the node (e.g., shanghai-1)'
    required: true
  aws_role_arn:
    description: 'AWS IAM role ARN for S3 access'
    required: true
  s3_bucket:
    description: 'S3 bucket name for storing images'
    required: true

runs:
  using: 'composite'
  steps:
    - name: Set up QEMU for ARM64 emulation
      uses: docker/setup-qemu-action@v3
      with:
        platforms: linux/arm64

    - name: Install Armbian build dependencies
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          git \
          build-essential \
          qemu-user-static \
          debootstrap \
          rsync \
          parted \
          kpartx \
          ansible \
          python3-dev \
          python3-pip \
          bc \
          binfmt-support

    - name: Clone Armbian build system
      shell: bash
      run: |
        echo "Cloning Armbian build repository..."
        git clone --depth=1 https://github.com/armbian/build armbian
        cd armbian
        
        echo "Armbian build system cloned:"
        echo "- Version: $(git describe --tags --always)"
        echo "- Directory size: $(du -sh . | cut -f1)"

    - name: Cache Armbian build artifacts
      uses: actions/cache@v4
      id: cache-armbian-build
      with:
        path: |
          armbian/cache
          armbian/output
        key: armbian-build-orangepizero3-${{ hashFiles('ansible/playbooks/node-${{ inputs.node_name }}.yml') || '20250721' }}
        restore-keys: |
          armbian-build-orangepizero3-

    - name: Build Orange Pi Zero 3 image with Armbian
      shell: bash
      run: |
        cd armbian
        
        echo "🏗️ Building Orange Pi Zero 3 custom image..."
        echo "📋 Build configuration:"
        echo "  - Board: orangepizero3"
        echo "  - Branch: current"
        echo "  - Release: noble"
        echo "  - Build: minimal"
        echo "  - Node: ${{ inputs.node_name }}"
        
        # Set CPU cores for faster build
        CPUS=$(nproc)
        echo "🚀 Using $CPUS CPU cores for parallel build"
        
        # Configure build with optimization for GitHub Actions
        ./compile.sh \
          BOARD=orangepizero3 \
          BRANCH=current \
          RELEASE=noble \
          BUILD_MINIMAL=yes \
          BUILD_DESKTOP=no \
          KERNEL_CONFIGURE=no \
          COMPRESS_OUTPUTIMAGE=xz \
          EXPERT=yes \
          CREATE_PATCHES=no \
          FORCE_CHECKOUT=yes \
          PARALLEL="$CPUS" \
          PROGRESS_LOG_TO_FILE=yes \
          SYNC_CLOCK=no \
          SKIP_EXTERNAL_TOOLCHAINS=yes
        
        echo "🎯 Armbian build completed!"
        
        # Find the generated image
        OUTPUT_IMAGE=$(find output/images -name "Armbian*Orangepizero3*.img.xz" | head -n1)
        if [ -z "$OUTPUT_IMAGE" ]; then
          echo "❌ Error: No output image found"
          echo "📁 Available files in output/images:"
          ls -la output/images/ || echo "No output/images directory"
          echo "📁 Looking for any .img files:"
          find . -name "*.img*" -type f || echo "No .img files found"
          exit 1
        fi
        
        echo "📦 Generated image: $OUTPUT_IMAGE"
        echo "📏 Image size: $(du -h "$OUTPUT_IMAGE" | cut -f1)"
        
        # Move to expected location
        cp "$OUTPUT_IMAGE" ../orangepi-zero3-noble-server.img.xz
        
    - name: Extract and customize image for node
      shell: bash
      run: |
        # Use the built image
        IMAGE_FILE="orangepi-zero3-noble-server.img.xz"
        if [ ! -f "$IMAGE_FILE" ]; then
          echo "Error: Built image file not found: $IMAGE_FILE"
          exit 1
        fi
        
        echo "Using built image: $IMAGE_FILE"
        
        # Extract image
        xz -d "$IMAGE_FILE"
        IMG_FILE="orangepi-zero3-noble-server.img"
        
        # Create loop device
        LOOP_DEVICE=$(sudo losetup -f --show "$IMG_FILE")
        echo "Loop device: $LOOP_DEVICE"
        
        # Wait for partitions to be available
        sleep 2
        sudo partprobe "$LOOP_DEVICE"
        
        # Mount root partition
        sudo mkdir -p /mnt/orangepi
        sudo mount "${LOOP_DEVICE}p1" /mnt/orangepi
        
        # Apply common control-plane configuration first
        cd ansible
        sudo ansible-playbook \
          -i localhost, \
          -c local \
          -e ansible_host=localhost \
          -e target_mount=/mnt/orangepi \
          playbooks/control-plane.yml
        
        # Apply node-specific configuration
        sudo ansible-playbook \
          -i localhost, \
          -c local \
          -e ansible_host=localhost \
          -e target_mount=/mnt/orangepi \
          playbooks/node-${{ inputs.node_name }}.yml
        
        # Return to parent directory
        cd ..
        
        # Cleanup
        sudo umount /mnt/orangepi
        sudo losetup -d "$LOOP_DEVICE"
        
        # Compress customized image
        xz -9 "$IMG_FILE"
        
        # Create final image name
        FINAL_IMAGE="orangepi-zero3-${{ inputs.node_name }}.img.xz"
        mv "${IMG_FILE}.xz" "$FINAL_IMAGE"
        
        # Generate checksum
        sha256sum "$FINAL_IMAGE" > "${FINAL_IMAGE}.sha256"
        
        # Create image info
        cat > image-info.json << EOF
        {
          "node_name": "${{ inputs.node_name }}",
          "build_date": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
          "image_file": "$FINAL_IMAGE",
          "checksum_file": "${FINAL_IMAGE}.sha256",
          "armbian_version": "custom-build-noble",
          "build_method": "armbian/build",
          "github_sha": "$GITHUB_SHA"
        }
        EOF

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ inputs.aws_role_arn }}
        aws-region: ap-northeast-1

    - name: Upload to S3
      shell: bash
      run: |
        # Upload image file
        aws s3 cp "orangepi-zero3-${{ inputs.node_name }}.img.xz" \
          "s3://${{ inputs.s3_bucket }}/images/orange-pi-zero3/${{ inputs.node_name }}/"
        
        # Upload checksum
        aws s3 cp "orangepi-zero3-${{ inputs.node_name }}.img.xz.sha256" \
          "s3://${{ inputs.s3_bucket }}/images/orange-pi-zero3/${{ inputs.node_name }}/"
        
        # Upload image info
        aws s3 cp image-info.json \
          "s3://${{ inputs.s3_bucket }}/images/orange-pi-zero3/${{ inputs.node_name }}/"
        
        # Create latest symlink
        aws s3 cp "orangepi-zero3-${{ inputs.node_name }}.img.xz" \
          "s3://${{ inputs.s3_bucket }}/images/orange-pi-zero3/${{ inputs.node_name }}/latest.img.xz"
        
        # Set metadata
        aws s3api put-object-tagging \
          --bucket "${{ inputs.s3_bucket }}" \
          --key "images/orange-pi-zero3/${{ inputs.node_name }}/orangepi-zero3-${{ inputs.node_name }}.img.xz" \
          --tagging "TagSet=[{Key=NodeName,Value=${{ inputs.node_name }}},{Key=BuildDate,Value=$(date +%Y-%m-%d)},{Key=GitSHA,Value=$GITHUB_SHA}]"