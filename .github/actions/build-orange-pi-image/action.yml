name: 'Build Orange Pi Image'
description: 'Build customized Orange Pi Zero 3 image for specific node'
inputs:
  node_name:
    description: 'Name of the node (e.g., shanghai-1)'
    required: true
  aws_role_arn:
    description: 'AWS IAM role ARN for S3 access'
    required: true
  s3_bucket:
    description: 'S3 bucket name for storing images'
    required: true

runs:
  using: 'composite'
  steps:
    - name: Set up QEMU for ARM64 emulation
      uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # v3
      with:
        platforms: linux/arm64

    - name: Install Armbian build dependencies
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          git \
          build-essential \
          qemu-user-static \
          debootstrap \
          rsync \
          parted \
          kpartx \
          ansible \
          python3-dev \
          python3-pip \
          bc \
          binfmt-support
        
        # Install Ansible collections needed for chroot
        ansible-galaxy collection install community.general

    - name: Clone Armbian build system
      shell: bash
      run: |
        echo "Cloning Armbian build repository..."
        git clone --depth=1 https://github.com/armbian/build armbian
        cd armbian
        
        echo "Armbian build system cloned:"
        echo "- Version: $(git describe --tags --always)"
        echo "- Directory size: $(du -sh . | cut -f1)"

    - name: Cache Armbian build artifacts
      uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4
      id: cache-armbian-build
      with:
        path: |
          armbian/cache
          armbian/output
        key: armbian-build-orangepizero3-${{ hashFiles('ansible/playbooks/node-${{ inputs.node_name }}.yml') || '20250721' }}
        restore-keys: |
          armbian-build-orangepizero3-

    - name: Prepare customization files
      shell: bash
      run: |
        echo "📋 Preparing Armbian customization files..."
        
        # Copy userpatches directory to Armbian build (standard location)
        cp -r userpatches armbian/
        
        # Copy ansible directory to overlay just before build
        echo "📋 Copying Ansible files to overlay..."
        cp -r ansible armbian/userpatches/overlay/ansible
        
        echo "✅ Customization files prepared!"
        echo "📁 Userpatches contents:"
        ls -la armbian/userpatches/
        echo "📁 Overlay contents:"
        ls -la armbian/userpatches/overlay/

    - name: Build Orange Pi Zero 3 image with Armbian and customization
      shell: bash
      run: |
        cd armbian
        
        echo "🏗️ Building Orange Pi Zero 3 custom image with integrated customization..."
        echo "📋 Build configuration:"
        echo "  - Board: orangepizero3"
        echo "  - Branch: current"
        echo "  - Release: noble"
        echo "  - Build: minimal"
        echo "  - Node: ${{ inputs.node_name }}"
        echo "  - Customization: customize-image.sh"
        
        # Set CPU cores for faster build
        CPUS=$(nproc)
        echo "🚀 Using $CPUS CPU cores for parallel build"
        
        # Configure build with customization support
        echo 'export ORANGEPI_NODE_NAME="${{ inputs.node_name }}"' >> userpatches/config-shanghai.conf.sh
        
        ./compile.sh shanghai \
          BOARD=orangepizero3 \
          BRANCH=current \
          RELEASE=noble \
          BUILD_MINIMAL=yes \
          BUILD_DESKTOP=no \
          KERNEL_CONFIGURE=no \
          COMPRESS_OUTPUTIMAGE=xz \
          EXPERT=yes \
          CREATE_PATCHES=no \
          FORCE_CHECKOUT=yes \
          PARALLEL="$CPUS" \
          PROGRESS_LOG_TO_FILE=yes \
          SYNC_CLOCK=no \
          SKIP_EXTERNAL_TOOLCHAINS=yes
        
        echo "🎯 Armbian build with customization completed!"
        
        # Fix file permissions for cache artifacts
        sudo chown -R runner:docker cache/ output/ || true
        
        # Find the generated image
        OUTPUT_IMAGE=$(find output/images -name "Armbian*Orangepizero3*.img.xz" | head -n1)
        if [ -z "$OUTPUT_IMAGE" ]; then
          echo "❌ Error: No output image found"
          echo "📁 Available files in output/images:"
          ls -la output/images/ || echo "No output/images directory"
          echo "📁 Looking for any .img files:"
          find . -name "*.img*" -type f || echo "No .img files found"
          exit 1
        fi
        
        echo "📦 Generated customized image: $OUTPUT_IMAGE"
        echo "📏 Image size: $(du -h "$OUTPUT_IMAGE" | cut -f1)"
        
        # Move to expected location with node-specific naming
        BUILD_TIMESTAMP=$(date +%Y%m%d-%H%M%S)
        GIT_SHORT_SHA=$(echo "$GITHUB_SHA" | cut -c1-8)
        FINAL_IMAGE="orangepi-zero3-${{ inputs.node_name }}-${BUILD_TIMESTAMP}-${GIT_SHORT_SHA}.img.xz"
        cp "$OUTPUT_IMAGE" "../$FINAL_IMAGE"
        
        # Generate checksum
        cd ..
        sha256sum "$FINAL_IMAGE" > "${FINAL_IMAGE}.sha256"
        
        # Create image info
        cat > image-info.json << EOF
        {
          "node_name": "${{ inputs.node_name }}",
          "build_date": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
          "image_file": "$FINAL_IMAGE",
          "checksum_file": "${FINAL_IMAGE}.sha256",
          "armbian_version": "custom-build-noble",
          "build_method": "armbian/build-with-customize-script",
          "github_sha": "$GITHUB_SHA"
        }
        EOF
        
        echo "FINAL_IMAGE=$FINAL_IMAGE" >> "$GITHUB_ENV"

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502 # v4
      with:
        role-to-assume: ${{ inputs.aws_role_arn }}
        aws-region: ap-northeast-1

    - name: Upload to S3
      shell: bash
      run: |
        # Upload image file with unique name
        aws s3 cp "$FINAL_IMAGE" \
          "s3://${{ inputs.s3_bucket }}/images/orange-pi-zero3/${{ inputs.node_name }}/"
        
        # Upload checksum
        aws s3 cp "${FINAL_IMAGE}.sha256" \
          "s3://${{ inputs.s3_bucket }}/images/orange-pi-zero3/${{ inputs.node_name }}/"
        
        # Upload image info
        aws s3 cp image-info.json \
          "s3://${{ inputs.s3_bucket }}/images/orange-pi-zero3/${{ inputs.node_name }}/"
        
        # Create latest.img.xz by copying the uploaded image
        aws s3api copy-object \
          --copy-source "${{ inputs.s3_bucket }}/images/orange-pi-zero3/${{ inputs.node_name }}/$FINAL_IMAGE" \
          --bucket "${{ inputs.s3_bucket }}" \
          --key "images/orange-pi-zero3/${{ inputs.node_name }}/latest.img.xz"
        
        # Set metadata on the unique image file
        aws s3api put-object-tagging \
          --bucket "${{ inputs.s3_bucket }}" \
          --key "images/orange-pi-zero3/${{ inputs.node_name }}/$FINAL_IMAGE" \
          --tagging "TagSet=[{Key=NodeName,Value=${{ inputs.node_name }}},{Key=BuildDate,Value=$(date +%Y-%m-%d)},{Key=GitSHA,Value=$GITHUB_SHA}]"
